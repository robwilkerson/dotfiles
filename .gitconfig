
#
# THE IMPORTANT BITS
#


# See ~/dotfiles/.extra for the contents of the [user] section.
[user]

  name = robwilkerson
  email = rob@robwilkerson.org

[core]

  # Use custom ignore & attributes files
  excludesfile = ~/.gitignore

  # Use VIm to enter/edit commit messages
  editor = /usr/bin/vim

  # Line ending nonsense
  autocrlf = input

[push]

  # Push the current branch to its upstream branch
  # No other branches will be pushed
  default = simple

[branch]

  # Always pull (i.e. from upstream sources) via rebase on tracking
  # branches.
  autosetuprebase = always


#
# OPTIONAL BITS
# Use, modify or discard these as you choose
#


[alias]

  # Because convenient
  co = checkout
  br = branch
  ci = commit
  st = status -s
   d = diff
  sl = stash list
  sp = stash pop

  # So meta! Display all aliases
  aliases = !git config --get-regexp alias.*

  # Commits made by me and only me.
  mylog = log --pretty=format:'%Cred%h%Creset - %C(yellow)%ae%Creset - %Cgreen%cd%Creset - %s%Creset' --abbrev-commit --author=rob@robwilkerson.org --date=iso
  # Dead simple SHA and commit message only
  plog = log --abbrev-commit --pretty=oneline
  # SHA, commit message & committer
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
  # Same as ls, but includes a list of files updated
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  # Same as ls, but adds the datestamp of the commit
  lsd = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
  # Same as lsd, but prints the timestamp rather that just the datestamp
  lsdt = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=local

  # Identifies any files that are currently being ignored
  ignored = ls-files -o -i --exclude-standard
  assume = update-index --assume-unchanged
  unassume = update-index --no-assume-unchanged
  assumed = !git ls-files -v | grep ^h | cut -c 3-

  # Do stuff with submodules
  sm = submodule
  smup = !git submodule sync && git submodule update --init

  # Stuff that comes up from time to time...
  reset-perms = "!git diff -p | grep -E '^(diff|old mode|new mode)' | sed -e 's/^old/NEW/;s/^new/old/;s/^NEW/new/' | git apply"

  # When `git reset --hard HEAD` doesn't work, try this.
  # @see http://stackoverflow.com/a/19588910/1665
  forcereset = !git rm .gitattributes && git add -A && git reset --hard

[apply]

  whitespace = fix

[color]

  # Use colors in Git commands that are capable of colored output.
  ui = auto

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]

  meta = yellow bold
  frag = magenta bold
  old = red
  new = green

[color "status"]

  added = yellow
  changed = green
  untracked = cyan

[merge]

  tool = diffmerge

[mergetool "diffmerge"]

  cmd = diffmerge "$LOCAL" "$REMOTE"
  keepBackup = false
  trustExitCode = false

[help]

  # Automatically correct and execute mistyped commands
  autocorrect = 1
